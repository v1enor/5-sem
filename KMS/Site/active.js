//время до появления медального окна 1, зависящее от размера страницы
var timeout;
var countignore = 0;
var ignore = true;
var dialogOn = false;


//подготовка активной среды (создание окон)
function prepare_environment() {

  //окна активной среды
  timeout = document.body.innerHTML.length;
  //диалоговый модуль
  document.body.innerHTML +=
    `<div id='dialog' class='dialog' style='margin-left:-40px;'>
      <div class='label' onclick='toggleDialog()'>Задайте вопрос!</div>
      <div class='header'>История:</div>
      <div class='history' id='history'></div>
      <div class='question'  ><input id='Qdialog' placeholder='Введите вопрос'  onKeyDown='if(event.keyCode==13)ask(&quot;Qdialog&quot;)'/><br>
      <button onclick='ask(\"Qdialog\")'>Получить ответ</button>
      </div></div>`;
  //крупный план изображений
  document.body.innerHTML += "<div id='imgalert' style='display:none'>" + "<div class='bg' onclick='hide(\"imgalert\")'>&nbsp;</div>" + "<img id='img_in_alert' src='' />" + "</div>";

  //РАСПОЗНАВАНИЕ РЕЧИ
  //поле с распознаванием речи. Задаем API-ключ

  window.ya.speechkit.settings.apikey = '5c6d6536-b453-4589-9bc7-f16c7a795106';

  // Добавление элемента управления "Поле для голосового ввода".
  var textline = new ya.speechkit.Textline(
    'Qdialog', {
      onInputFinished: function (text) {
        ask("Qdialog");
      }
    });

  //КОНЕЦ РАСПОЗНАВАНИЯ РЕЧИ
  //привязка окон активной среды с событиями. Показ модального окна 1 через интервал времени, зависящий от размера страницы

  timer = setInterval(alert_over_time, timeout);

  try {
    //открытие журналов посещенных адресов и дат посещения:
    //попытка использования массива адресов открытых страниц из локального хранилища
    var URLlog = JSON.parse(localStorage.URLlog);
    //удаление адресов из начала массива, пока в массиве не останется 5 адресов
    while (URLlog.length > 5) URLlog.shift(0);
    //попытка использоваения массива дат открытия страниц из локального хранилища
    var log = JSON.parse(localStorage.log);
    //удаление дат из начала массива, пока в массиве не останется 5 дат
    while (log.length > 5) log.shift(0);
    //проверка на необходимость срабатывания реакций:
    //только если сделан переход со страницы на страницу (не обновление страницы)
    if (location.href != URLlog[URLlog.length - 1]) {
      //если сделан переход на одну из последних пяти посещенных страниц,
      //очищаем массив и показываем модальное окно 3
      if (URLlog.indexOf(location.href) !== -1) {
        while (URLlog.length > 0) URLlog.shift(0);//очистка массива адресов
        alert_for_back();
      }
        //только если не возникла реакция возврата на предыдущий адрес
      //проверяем необходимость реакции на быстрые переходы:
      else {
        //если сделано 5 переходов меньше чем за минуту -
        //очищаем массив и показываем модальное окно 2
        if (log.length >= 5 && ((new Date()) - Date.parse(log[0])) < 60000) {
          while (log.length > 0) log.shift(0);//очистка массива дат
          alert_for_speed();
        }
      }
      //в любом случае, независимо от срабатывания реакций, при переходе со страницы на страницу:
      URLlog.push(location.href);	//запись адреса текущей страницы в массив
      log.push(new Date());		//запись даты перехода в массив
    }
  } catch (e) {
    var URLlog = new Array();	//инициализация массива адресов открытых страниц
    var log = new Array();	//инициализация массива дат открытия страниц
  }
  //запись массива адресов в локальное хранилище в формате JSON
  localStorage.URLlog = JSON.stringify(URLlog);
  //запись массива дат в локальное хранилище в формате JSON
  localStorage.log = JSON.stringify(log);

}

//запуск подготовки среды при загрузке окна
window.onload = function () {
  prepare_environment();
};

//скрытие сообщений при щелчке на фон
function hide(elem_id) {
  $("#" + elem_id).css({ "display": "none" });
  timer = setInterval(alert_over_time, timeout);
  if (ignore) {
    try {
      var countignore = localStorage.getItem("countignore");
    } catch (e) {
      localStorage.setItem("countignore", countignore);
    }
    countignore++;
    localStorage.setItem("countignore", countignore);
    if (countignore > 2) alert_for_ignore();
  } else {
    localStorage.setItem("countignore", 0);
  }
  ignore = true;
}

//показ сообщений
function alert_over_time() {
  $("#alert1").css({ "display": "block" });
  clearInterval(timer);
}

function alert_for_speed() {
  $("#alert2").css({ "display": "block" });
  clearInterval(timer);
}

function alert_for_back() {
  $("#alert3").css({ "display": "block" });
  clearInterval(timer);
}

//ДИАЛОГ
//показ-скрытие диалогового модуля
function toggleDialog() {
  //закрытие
  if (dialogOn) {
    $("#dialog").animate({ "margin-left": "-40px" }, 1000, function () {
    });
    dialogOn = false;
    timer = setInterval(alert_over_time, timeout);
  }
  //открытие
  else {
    $("#dialog").animate({ "margin-left": "-400px" }, 1000, function () {
    });
    dialogOn = true;
    clearInterval(timer);
  }
}


var knowledge = 
[
  ["проводник", "-", "вещество, среда, материал, хорошо проводящие электрический ток."],
  ["диэлектрик", "-", "вещества, которые плохо пропускают электрический ток. Они состоят из нейтральных атомов или молекул, которые имеют связанные электроны, которые не могут перемещаться внутри вещества."],
  ["свободные заряды", "такие заряды", ", которые свободно перемещаются внутри вещества. Освободные заряды обычно находятся в проводниках и могут быть переданы при прикосновении к другому веществу."],
  ["электрический ток", "есть", " равномерное движение свободных зарядов внутри вещества."],
  ["электрический ток", "измеряется", "в амперах"],
  ["cвязанные заряды", "есть", " электроны, которые не свободно перемещаются внутри вещества. Связанные заряды находятся в диэлектриках и связаны с атомами или молекулами, с которыми состоят."],
  ["cвязанные заряды", "есть", " электроны, которые не свободно перемещаются внутри вещества. Связанные заряды находятся в диэлектриках и связаны с атомами или молекулами, с которыми состоят."],
  ["полярные диэлектрики", "есть", " диэлектрики, в которых внутри вещества имеется разность потенциалов. Полярные диэлектрики часто образуются при наличии дипольных моментов и могут быть использованы для разделения электрического заряда."],
  ["дипольный момент", "-", " электростатическое взаимодействие между электронами и положительными зарядами внутри молекулы."],
  ["поляризация", "называется", " разделение электрического заряда внутри вещества."],
  ["ориентационная поляризация", "называется", "поляризация, которая возникает в результате взаимодействия молекул в направлении c электрического поля."],
  ["неполярные диэлектрики", "- это", " диэлектрики, в которых нет разности потенциалов и нет дипольных моментов."],
  ["неполярная молекула", "- это", " молекула, которая не имеет разности потенциалов и не имеет дипольных моментов."],
  ["квазиупругие диполи", "- это", " это диполи, которые имеют небольшую разность потенциалов и небольшой дипольный момент."],
  ["электронная поляризация", "- это", " поляризация, которая возникает в результате взаимодействия молекул с электронами."],
  ["ионно-кристаллические диэлектрики", " - ", "это диэлектрики, которые состоят из ионов, связанных между собой в кристаллической решёткой."],
  ["ионное строение", "-", "способ расположения ионов в кристаллической решетке. Ионное строение образуется в результате взаимодействия ионов с электростатическими силами."],
  ["ионные кристаллы", "-", "кристаллические соединения, в которых ионы связаны между собой в результате взаимодействия электростатических сил."],
  ["ионная поляризация", "есть" , "поляризация, которая возникает в результате взаимодействия ионов с электрическим полем."],
  ["вектор поляризации", "есть", "вектор, который указывает направление и величину поляризации в каждой точке пространства."],
  ["диэлектрическая проницаемость вещества", "есть", "способность вещества пропускать электрический ток."],
  ["диэлектрическая проницаемость вещества", "измеряется", "в фарадах на метр"],
  ["напряженность электрического поля", "-", "сила, с которой электрическое поле воздействует на электрический заряд. "],
  ["напряженность электрического поля", "измеряется", "в вольтах на метр"],
  ["вакуум","-", "пространство, в котором нет вещества и нет электрических зарядов."],
  ["карта установки", "выглядит", "так <iframe src='map_sutanovka/ust.html' width='230' height='155' class='iframe-anim'></iframe>"],
  ["установка", "выглядит", "так <img width='150' height='150' src='images/PXL_20221004_092747824.jpg'/>"],
  ["тепловое движение молекул","выглядит", "так <img  width='150' height='155' src='/img/31.1.jpg'/>"],
  ["смещение молекул","выглядит", "так <img width='150' height='155' src='img/31.2.jpg'/>" ],
  ["ионная поляризация","выглядит", "так <img width='150' height='155' src='img/31.3.jpg'/>" ],
  ["избыток отрицательных зарядов","выглядит", "так <img width='150' height='155' src='img/31.4.png'/>"],
  ["схема куметра","выглядит", "так <img width='150' height='155' src='img/31.5.png'/>"],
  ["куметр", "-","радиоизмерительный прибор для определения добротности элементов электрических цепей."],
  ["добротность", "-","параметр колебательной системы, определяющий ширину резонанса и характеризующий, во сколько раз запасы энергии в системе больше, чем потери энергии за время изменения фазы на 1 радиан."],
  ["резонанс", "-","частотно-избирательный отклик колебательной системы на периодическое внешнее воздействие, который проявляется в резком увеличении амплитуды стационарных колебаний при совпадении частоты внешнего воздействия с определёнными значениями, характерными для данной системы."],
  ["генератор тока высокой частоты", "-","это устройство, которое используется для производства электрического тока с частотой, которая выше, чем 50 Гц."],
  ["колебательный контур", "это","циклическая схема, в которой электрический ток и напряжение колеблются с частотой, которая зависит от характеристик электрических элементов контура."],
  ["емкость", "есть", "способность материального объекта или устройства накапливать электрический заряд."],
  ["емкость", "измеряется", "в фарад"],
  ["емкость", "обозначается", "как C"],
  ["формула емкости", "выгладит", "так  <img width='150' height='155' src='formules/emkost.jpeg'/>"],
  ["диэлектрическая проницаемость вещества", "обозначается", "как ε"],
  ["физика", "- это", "наука о природе в самом общем смысле"],
  ["физика", "является", "точной наукой о природе"],
  ["физический закон", "- это", "устойчивые и объективные закономерности"],
  ["физика", "изучает", "явления природы"],
  ["измерительная ячейка", "есть", " устройство, используемое для измерения диэлектрической проницаемости твердых диэлектриков."],
  ["диэлектрическая проницаемость гетинакса", "находится", "в диапазоне 5-6 фарадах на метр"],
  ["диэлектрическая проницаемость березы", "находится", "в диапазоне 3-4 фарадах на метр"],
  ["диэлектрическая проницаемость фенопласта", "находится", "в диапазоне 4-15 фарадах на метр"],
  ["диэлектрическая проницаемость полителена", "находится", "в диапазоне 2-2,3 фарадах на метр"],
  ["индуктивная катушка", "это", "винтовая, спиральная или винтоспиральная катушка из свёрнутого изолированного проводника. Обладает значительной индуктивностью при относительно малой ёмкости и малом активном сопротивлении."],
  ["индуктивность", "это", "коэффициент пропорциональности между электрическим током I, текущим в каком-либо замкнутом контуре, и полным магнитным потоком."],
  ["индуктивность", "измеряется", "в Генри."],
  ["индуктивность", "обозначается", "как L"],
  ["материал первого образца", "это", "полителен"],
  ["материал второго образца", "это", "фенопласт"],
  ["материал третьего образца", "это", "береза"],
  ["материал четвертого образца", "это", "гетинакс"],
  ["частота первой катушки", "находится", "в диапазоне 50-150кГц"],
  ["частота второй катушки", "находится", "в диапазоне 150-440кГц"],
  ["частота третьей катушки", "находится", "в диапазоне 440-1300кГц"],
  ["частота четвёртой катушки", "находится", "в диапазоне 1,3-4 МГц"],
  ["частота пятой катушки", "находится", "в диапазоне 4-12 МГц"],
  ['автором курсового проекта', 'является', 'Парибок Илья'],
  ['автор', 'выглядит', "так <img width='150' height='155' src='images/ilya.jpg'/>"],
  ['симулятор','это', 'имитатор (обычно механический или компьютерный), задача которого состоит в имитации управления каким-либо процессом'],
  ['вольтметр','работает','так: принцип работы вольтметров дискретного действия состоит в преобразовании измеряемого постоянного или медленно меняющегося напряжения в электрический код с помощью аналого-цифрового преобразователя, который отображается на табло в цифровой форме'],
  ['виды погрешностей','бывают','такие: абсолютная погрешность; относительна погрешность; приведенная погрешность; основная погрешность; дополнительная погрешность; систематическая погрешность; случайная погрешность; инструментальная погрешность; методическая погрешность; личная погрешность; статическая погрешность; динамическая погрешность.'],
  ['среднюю абсолютную ошибку','находят',"путем сложения абсолютных ошибок отдельных измерений, без учета их знаков, и деления на число измерений n: <br/><img src='Pics/errorAbs.png'/>"],
  ['курсовой проект','используется','для моделирования лабораторной работы по физике'],
  ['сайт', 'разрабатывается', 'используя html, css, js'],
  ['установка', 'работает', 'в Unity'],
  ['экземпляр сайта', 'запускается', 'на локальном сервере'],
  //   ["анимация работы установки", "выглядит", "так <iframe src='http://video/' width='230' height='155' class='iframe-anim'></iframe>"],
//   ["установка", "выглядит", "так <iframe  src='http://unity/' width='230' height='155'></iframe>"],

]
//поиск и вывод ответа и вопроса
function ask(questionInput) {
  var question = document.getElementById(questionInput).value.trim();
  //выдвижение диалогового модуля
  $("#dialog").animate({ 'margin-left': '-400px' }, 1000, null);
  dialogOn = true;
  //вывод вопроса
  // document.getElementById("history").innerHTML += "<div class='question'>" + question + "</div>";
  var newDiv = document.createElement("div");
  newDiv.className = 'question';
  newDiv.innerHTML = question;
  document.getElementById("history").appendChild(newDiv);
  //поиск и вывод ответа
  //document.getElementById("history").innerHTML+="<div class='answer'>"+getAnswer(question)+"</div>";
  //создаем блок <div>
  newDiv = document.createElement("div");
  //задаем класс оформления созданного блока
  newDiv.className = 'answer';
  //получаем ответ на вопрос и наполняем им созданный блок
  newDiv.innerHTML = getAnswer(question);
  //ОЗВУЧКА - СИНТЕЗ РЕЧИ
  //флаг, нужна ли озвучка (не нужна, если есть анимация)
  var needSound = true;
  //проходим по элементам HTML-кода ответа
  for (var i = 0; i < newDiv.childNodes.length; i++) {
    //если находим элемент <embed>
    if (newDiv.childNodes[i].tagName === "EMBED") {
      //alert("EMBED detected.");
      //сбрасываем флаг и выходим из цикла
      needSound = false;
      break;
    }
  }
  //если флаг не был сброшен
  // if (needSound) {
  //   //добавляем в ответ тег аудио, ссылающийся на звук от синтезатора речи яндекса
  //   //в обращении к яндексу tts.voicetech.yandex.net указывается:
  //   // - формат звука: format=wav
  //   // - язык озвучиваемого текста: lang=ru-RU
  //   // - ключ, полученный при регистрации в личном кабинете для SpeechKit Cloud API: key=4a4d3a13-d206-45fc-b8fb-e5a562c9f587
  //   // - озвучиваемый текст, который берется из сгенерированного ответа: text="+newDiv.innerText+"
  //   //alert("Incoming transmission.");
  //   newDiv.innerHTML += "<audio controls='true' autoplay='true' src='http://tts.voicetech.yandex.net/generate?format=wav&lang=ru-RU&key=4a4d3a13-d206-45fc-b8fb-e5a562c9f587&text=" + (newDiv.innerText || newDiv.textContent) + "'></audio>";
  // }
  // КОНЕЦ ОЗВУЧКИ
  document.getElementById("history").appendChild(newDiv);
  // ЕЩЕ КУСОЧЕК ДЛЯ ОЗВУЧКИ
  //запуск звука
  // if (newDiv.lastChild.tagName == "AUDIO") {
  //   newDiv.lastChild.play();
  // }
  //прокрутка истории в самый низ
  document.getElementById("history").scrollTop = document.getElementById("history").scrollHeight;
  //очистка текстового поля для ввода вопроса
  document.getElementById(questionInput).value = "";
}

//псевдоокончания сказуемых (глаголов, кратких причастий и прилагательных )
var endings = [["ет", "(ет|ут|ют)"], ["ут", "(ет|ут|ют)"], ["ют", "(ет|ут|ют)"],																										//1 спряжение
  ["ит", "(ит|ат|ят)"], ["ат", "(ит|ат|ят)"], ["ят", "(ит|ат|ят)"],																											//2 спряжение
  ["ется", "(ет|ут|ют)ся"], ["утся", "(ет|ут|ют)ся"], ["ются", "(ет|ут|ют)ся"],																					//1 спряжение, возвратные
  ["ится", "(ит|ат|ят)ся"], ["атся", "(ит|ат|ят)ся"], ["ятся", "(ит|ат|ят)ся"],																					//2 спряжение, возвратные
  ["ен", "ен"], ["ена", "ена"], ["ено", "ено"], ["ены", "ены"], ["ан", "ан"], ["ана", "ана"], ["ано", "ано"], ["аны", "аны"], //краткие прилагательные
  ["жен", "жен"], ["жна", "жна"], ["жно", "жно"], ["жны", "жны"],																													//краткие прилагательные
  ["такое", "- это"]];																																																	//для вопроса "что такое А?" ответ - "А - это ..."
//черный список слов, распознаваемых как сказуемые по ошибке
var blacklist = ["замена", "замены", "атрибут", "маршрут", "член", "нет"];

//функция определения сказуемых по соответствующим псевдоокончаниям
function getEnding(word) {
  //проверка по черному списку
  if (blacklist.indexOf(word) !== -1) return -1;
  //перебор псевдоокончаний
  for (var j = 0; j < endings.length; j++) {
    //проверка, оканчивается ли i-ое слово на j-ое псевдоокончание
    if (word.substring(word.length - endings[j][0].length) == endings[j][0]) {
      return j;   //возврат номера псевдоокончания
    }
  }
  return -1;  //если совпадений нет - возврат -1
}

//функция, которая делает первую букву маленькой
function small1(str) {
  return str.substring(0, 1).toLowerCase() + str.substring(1);
}

//функция, которая делает первую букву большой
function big1(str) {
  return str.substring(0, 1).toUpperCase() + str.substring(1);
}

//главная функция, обрабатывающая запросы клиентов
function getAnswer(question) {
  //знаки препинания
  var separators = "'\",.!?()[]\\/";
  //получение текста из параметра запроса
  var txt = small1(question);
  //добавление пробелов перед знаками препинания
  for (var i = 0; i < separators.length; i++)
    txt = txt.replace(separators[i], " " + separators[i]);
  //массив слов и знаков препинания
  var words = txt.split(' ');
  //флаг, найден ли ответ
  var result = false;
  //формируемый функцией ответ на вопрос
  var answer = "";
  //перебор слов
  for (var i = 0; i < words.length; i++) {
    //alert(words[i]);
    //поиск номера псевдоокончания
    var ending = getEnding(words[i]);
    //если псевдоокончание найдено – это сказуемое, подлежащее в вопросе после него
    if (ending >= 0) {
      //---ТОЧНЫЙ ПОИСК---
      //---ПОИСК С ПОМОЩЬЮ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ---
      //замена псевдоокончания на набор возможных окончаний
      words[i] = words[i].substring(0, words[i].length - endings[ending][0].length) + endings[ending][1];
      //создание регулярного выражения для поиска по сказуемому из вопроса
      var predicate = new RegExp(words[i]);
      //для кратких прилагательных захватываем следующее слово
      if (endings[ending][0] == endings[ending][1]) {
        predicate = new RegExp(words[i] + " " + words[i + 1]);
        i++;
      }
      var subject_array = words.slice(i + 1);
      var subject_text = subject_array.join(" ");
      //создание регулярного выражения для поиска по подлежащему из вопроса
      //из слов подлежащего выбрасываем короткие предлоги (периметр у квадрата = периметр квадрата)
      for (var j = 0; j < subject_array.length; j++) {
        if (subject_array[j].length < 3) {
          subject_array.splice(j);
          j--;
        }
      }
      var subject_string = subject_array.join(".*");
      //только если в послежащем больше трех символов
      if (subject_string.length > 3) {
        var subject = new RegExp(".*" + subject_string + ".*");
        //поиск совпадений с шаблонами среди связей семантической сети
        for (var j = 0; j < knowledge.length; j++) {
          if (predicate.test(knowledge[j][1]) && (subject.test(knowledge[j][0]) || subject.test(knowledge[j][2]))) {
            //создание простого предложения из семантической связи
            answer += big1(knowledge[j][0] + " " + knowledge[j][1] + " " + knowledge[j][2]);
            result = true;
          }
        }
        //если совпадений с двумя шаблонами нет,
        if (result == false) {
          //поиск совпадений только с шаблоном подлежащего
          for (var j = 0; j < knowledge.length; j++) {
            if ((subject.test(knowledge[j][0]) || subject.test(knowledge[j][2]))) {
              //создание простого предложения из семантической связи
              answer += big1(knowledge[j][0] + " " + knowledge[j][1] + " " + knowledge[j][2]);
              result = true;
            }
          }
        }
      }
    }
  }
  //если ответа нет
  if (!result)
    answer = "Ответ не найден. <br/>";
  //если ответ есть - добавляем увеличение картинок
  else
    answer = answer.replace("<img ", "<img width='500px' onclick='zoom(this.src)'");
  return answer;
}


// function zoom(src) {
//   document.getElementById("img_in_alert").src = src;
//   $("#imgalert").css({
//     "display": "block",
//     "position": "fixed",
//     "width": "200px",
//     "top": "10%",
//     "left": "10%",
//     "z-index": 0
//   });
//   $("#imgalert").addClass('alertHover');
//   document.getElementById("img_in_alert").classList.add('alertHover');
//   setTimeout(() => {
//     $("#imgalert").css({ "display": "none" });
//   }, 4000);
// }

// function makeImageBigger() {
//   $("#imgalert").css({
//     "height": "200px",
//     "position": "fixed",
//     "top": "10%"
//   });
// }


function zoom(src) {
  document.getElementById("img_in_alert").src = src;
  $("#imgalert").css({
    "display": "block",
    "position": "fixed",
    "top": "50%",
    "left": "50%",
    "transform": "translate(-50%, -50%)",
    "z-index": 5
  });
  $("#imgalert").addClass('alertHover');
  document.getElementById("img_in_alert").classList.add('alertHover');
  setTimeout(() => {
    $("#imgalert").css({ "display": "none" });
  }, 5000);
}

function makeImageBigger() {
  $("#imgalert").css({
    "height": "150px",
    "position": "fixed",
    "top": "150px"
  })};